{
	"info": {
		"_postman_id": "ea13afe1-a65a-49f1-8dd6-6edb303d3b82",
		"name": "CommeretoolsGraphQL",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authorization",
			"item": [
				{
					"name": "Obtain access token through password flow",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var data = JSON.parse(responseBody);",
									"if(data.access_token){",
									"    pm.environment.set(\"ctp_access_token\", data.access_token);",
									"}",
									"if (data.scope) {",
									"    parts = data.scope.split(\" \");",
									"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
									"    if (parts.length > 0) {",
									"        scopeParts = parts[0];",
									"        pm.environment.set(\"project-key\", scopeParts[1]);",
									"        parts = parts.filter(scope => scope.length >= 3)",
									"        if (parts.length > 0) {",
									"            scopeParts = parts[0];",
									"            pm.environment.set(\"store-key\", scopeParts[2]);",
									"        }",
									"    }",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{client_id}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{client_secret}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{auth_url}}/oauth/{{project-key}}/customers/token?grant_type=password&username=&password=",
							"host": [
								"{{auth_url}}"
							],
							"path": [
								"oauth",
								"{{project-key}}",
								"customers",
								"token"
							],
							"query": [
								{
									"key": "grant_type",
									"value": "password"
								},
								{
									"key": "username",
									"value": ""
								},
								{
									"key": "password",
									"value": ""
								}
							]
						},
						"description": "Use this request to obtain an access token for your commercetools platform project via Password Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id, client_secret, user_email and user_password to use this."
					},
					"response": []
				},
				{
					"name": "Token for Anonymous Sessions",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var data = JSON.parse(responseBody);",
									"if(data.access_token){",
									"    pm.environment.set(\"ctp_access_token\", data.access_token);",
									"}",
									"if (data.scope) {",
									"    parts = data.scope.split(\" \");",
									"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
									"    if (parts.length > 0) {",
									"        scopeParts = parts[0];",
									"        pm.environment.set(\"project-key\", scopeParts[1]);",
									"        parts = parts.filter(scope => scope.length >= 3)",
									"        if (parts.length > 0) {",
									"            scopeParts = parts[0];",
									"            pm.environment.set(\"store-key\", scopeParts[2]);",
									"        }",
									"    }",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{client_id}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{client_secret}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{auth_url}}/oauth/{{project-key}}/anonymous/token?grant_type=client_credentials",
							"host": [
								"{{auth_url}}"
							],
							"path": [
								"oauth",
								"{{project-key}}",
								"anonymous",
								"token"
							],
							"query": [
								{
									"key": "grant_type",
									"value": "client_credentials"
								}
							]
						},
						"description": "Use this request to obtain an access token for a anonymous session. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
					},
					"response": []
				},
				{
					"name": "Obtain access token",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var data = JSON.parse(responseBody);",
									"if(data.access_token){",
									"    pm.environment.set(\"ctp_access_token\", data.access_token);",
									"}",
									"if (data.scope) {",
									"    parts = data.scope.split(\" \");",
									"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
									"    if (parts.length > 0) {",
									"        scopeParts = parts[0];",
									"        pm.environment.set(\"project-key\", scopeParts[1]);",
									"        parts = parts.filter(scope => scope.length >= 3)",
									"        if (parts.length > 0) {",
									"            scopeParts = parts[0];",
									"            pm.environment.set(\"store-key\", scopeParts[2]);",
									"        }",
									"    }",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{client_id}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{client_secret}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
							"host": [
								"{{auth_url}}"
							],
							"path": [
								"oauth",
								"token"
							],
							"query": [
								{
									"key": "grant_type",
									"value": "client_credentials"
								}
							]
						},
						"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
					},
					"response": []
				},
				{
					"name": "Token Introspection",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{client_id}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{client_secret}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{auth_url}}/oauth/introspect?token={{ctp_access_token}}",
							"host": [
								"{{auth_url}}"
							],
							"path": [
								"oauth",
								"introspect"
							],
							"query": [
								{
									"key": "token",
									"value": "{{ctp_access_token}}"
								}
							]
						},
						"description": "Token introspection allows to determine the active state of an OAuth 2.0 access token and to determine meta-information about this accces token, such as the `scope`."
					},
					"response": []
				}
			]
		},
		{
			"name": "Projects",
			"item": [
				{
					"name": "Products",
					"item": [
						{
							"name": "Get Product by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"product-id\", data.results[0].id); ",
											"    pm.environment.set(\"product-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"product-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"product-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"product-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"product-key\", data.key);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{ctp_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "Bearer",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\n  product(sku: \"M0E20000000EE0N\") \n  {\n    id \n    version\n    productType{\n      name\n      description\n    }\n  }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/graphql",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"graphql"
									],
									"query": [
										{
											"key": "priceCurrency",
											"value": "",
											"disabled": true
										},
										{
											"key": "priceCountry",
											"value": "",
											"disabled": true
										},
										{
											"key": "priceCustomerGroup",
											"value": "",
											"disabled": true
										},
										{
											"key": "priceChannel",
											"value": "",
											"disabled": true
										},
										{
											"key": "localeProjection",
											"value": "",
											"disabled": true
										},
										{
											"key": "storeProjection",
											"value": "",
											"disabled": true
										},
										{
											"key": "expand",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "Gets the full representation of a product by ID."
							},
							"response": []
						},
						{
							"name": "Query products",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"product-id\", data.results[0].id); ",
											"    pm.environment.set(\"product-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"product-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"product-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"product-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"product-key\", data.key);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{ctp_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "Bearer",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\n  products{\n    results{\n      id\n      version\n      productType{\n        name\n        attributeDefinitions{\n          results{\n            name\n            type{\n              name\n            }\n          }\n          \n        }\n      }\n    }\n  }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/graphql",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"graphql"
									],
									"query": [
										{
											"key": "priceCurrency",
											"value": "",
											"disabled": true
										},
										{
											"key": "priceCountry",
											"value": "",
											"disabled": true
										},
										{
											"key": "priceCustomerGroup",
											"value": "",
											"disabled": true
										},
										{
											"key": "priceChannel",
											"value": "",
											"disabled": true
										},
										{
											"key": "localeProjection",
											"value": "",
											"disabled": true
										},
										{
											"key": "storeProjection",
											"value": "",
											"disabled": true
										},
										{
											"key": "expand",
											"value": "",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "",
											"disabled": true
										},
										{
											"key": "offset",
											"value": "",
											"disabled": true
										},
										{
											"key": "withTotal",
											"value": "",
											"disabled": true
										},
										{
											"key": "where",
											"value": "",
											"disabled": true
										},
										{
											"key": "/^var[.][a-zA-Z0-9]+$/",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "You can use the query endpoint to get the full representations of products.\nREMARK: We suggest to use the performance optimized search endpoint which has a bunch functionalities,\nthe query API lacks like sorting on custom attributes, etc.\n"
							},
							"response": []
						}
					],
					"description": "Products are the sellable goods in an e-commerce project on CTP. This document explains some design concepts\nof products on CTP and describes the available HTTP APIs for working with them.\n"
				}
			]
		}
	]
}